import numpy as np
import matplotlib.pyplot as plt
import matplotlib.animation as animation


G = 1e4
dt = 1e-2
planets = []


class State:
    """Current state"""
    def __init__(self, x, y, vx, vy):
        self.x = x
        self.y = y
        self.vx = vx
        self.vy = vy

    def __repr__(self):
        return "x:{0} y:{1} vx:{2} vy:{3}".format(
            self.x, self.y, self.vx, self.vy)


class Planet:
    """Class representing an arbitrary planet"""
    def __init__(self, radius, mass, xi, yi, vix, viy):
        self.r = radius
        self.m = mass
        self.state = State(
            xi,
            yi,
            vix,
            viy)

    def __repr__(self):
        return repr(self.state)

    def get2BodyForce(self, body2):
        del_x = body2.state.x - self.state.x
        del_y = body2.state.y - self.state.y
        norm = np.sqrt(del_x**2+del_y**2)
        dx = del_x/norm
        dy = del_y/norm
        F = G*body2.m*self.m/norm**2
        Fx = F*dx
        Fy = F*dy
        return Fx, Fy

    def getNetForce(self):
        Fxs = []
        Fys = []
        for body in planets:
            if body == self:
                pass
            else:
                Fx, Fy = self.get2BodyForce(body)
                Fxs.append(Fx)
                Fys.append(Fy)
        Net_Fx = sum(Fxs)
        Net_Fy = sum(Fys)
        return Net_Fx, Net_Fy

    def updateState(self, Fx, Fy):
        ax = Fx/self.m
        ay = Fy/self.m

        self.state.x = self.state.x + self.state.vx*dt + 0.5*ax*dt**2
        self.state.y = self.state.y + self.state.vy*dt + 0.5*ay*dt**2

        self.state.vx = self.state.vx + ax*dt
        self.state.vy = self.state.vy + ay*dt


if __name__ == "__main__":
    planets.append(Planet(1, 1.5, 0, 0, 1, 0))
    planets.append(Planet(1, 1, 10, 10, 0, 0))
    planets.append(Planet(1, 0.1, 0, 10, -0.25, 0))
    planets.append(Planet(1, 1, 10, 0, 0, 0))

    plt.figure()
    plt.ion()
    
    i = 0
    while i < 100:
        Fx1, Fy1 = planets[0].getNetForce()
        Fx2, Fy2 = planets[1].getNetForce()
        Fx3, Fy3 = planets[2].getNetForce()
        Fx4, Fy4 = planets[3].getNetForce()
        planets[0].updateState(Fx1, Fy1)
        planets[1].updateState(Fx2, Fy2)
        planets[2].updateState(Fx3, Fy3)
        planets[3].updateState(Fx4, Fy4)
        
        plt.scatter(planets[0].state.x, planets[0].state.y, c='b')
        plt.scatter(planets[1].state.x, planets[1].state.y, c='r')
        plt.scatter(planets[2].state.x, planets[2].state.y, c='g')
        plt.scatter(planets[3].state.x, planets[3].state.y, c='k')

        plt.pause(0.0005)
        plt.show()

        print i
        i += 1
        
        
